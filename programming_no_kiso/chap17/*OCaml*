        OCaml version 4.07.0

# (* 木を表す型 *)
type tree_t = Empty (* 空の木 *) 
                | Leaf of int (* 葉 *) 
                | Node of tree_t * int * tree_t (* 節 *);;
(* receive tree_t and return the sum of node and leaf *)
(* tree_length : tree_t -> int *)
(* example of tree *)
let tree1 = Empty;;
let tree2 = Leaf(3);;
let tree3 = Node (tree1, 4, tree2);;
let tree4 = Node (tree2, 5, tree3);;

(* receive ree_t and return the depth *)
(* tree_depth : tree_t -> int *)
let rec tree_depth tree = match tree with
    Empty -> 0
  | Leaf (n) -> 1
  | Node (t1, n, t2) -> 1 + max(tree_depth t1) (tree_depth t2);;

(* test *)
let test1 = tree_depth tree1 = 0;;
let test2 = tree_depth tree2 = 1;;
let test3 = tree_depth tree3 = 2;;
let test4 = tree_depth tree4 = 3;;
type tree_t = Empty | Leaf of int | Node of tree_t * int * tree_t
# val tree1 : tree_t = Empty
# val tree2 : tree_t = Leaf 3
# val tree3 : tree_t = Node (Empty, 4, Leaf 3)
# val tree4 : tree_t = Node (Leaf 3, 5, Node (Empty, 4, Leaf 3))
# val tree_depth : tree_t -> int = <fun>
# val test1 : bool = true
# val test2 : bool = true
# val test3 : bool = true
# val test4 : bool = true
# 
(* 木を表す型 *)
type tree_t = Empty (* 空の木 *) 
                | Leaf of int (* 葉 *) 
                | Node of tree_t * int * tree_t (* 節 *);;
(* receive tree_t and return the sum of node and leaf *)
(* tree_length : tree_t -> int *)
(* example of tree *)
let tree1 = Empty;;
let tree2 = Leaf(3);;
let tree3 = Node (tree1, 4, tree2);;
let tree4 = Node (tree2, 5, tree3);;

(* receive ree_t and return the depth *)
(* tree_depth : tree_t -> int *)
let rec tree_depth tree = match tree with
    Empty -> 0
  | Leaf (n) -> 1
  | Node (t1, n, t2) -> 1 + max(tree_depth t1) (tree_depth t2);;

(* test *)
let test1 = tree_depth tree1 = 0;;
let test2 = tree_depth tree2 = 1;;
let test3 = tree_depth tree3 = 2;;
let test4 = tree_depth tree4 = 3;;
type tree_t = Empty | Leaf of int | Node of tree_t * int * tree_t
# val tree1 : tree_t = Empty
# val tree2 : tree_t = Leaf 3
# val tree3 : tree_t = Node (Empty, 4, Leaf 3)
# val tree4 : tree_t = Node (Leaf 3, 5, Node (Empty, 4, Leaf 3))
# val tree_depth : tree_t -> int = <fun>
# val test1 : bool = true
# val test2 : bool = true
# val test3 : bool = true
# val test4 : bool = true
# (* 木を表す型 *)
type tree_t = Empty (* 空の木 *) 
                | Leaf of int (* 葉 *) 
                | Node of tree_t * int * tree_t (* 節 *);;
(* receive tree_t and return the sum of node and leaf *)
(* tree_length : tree_t -> int *)
(* example of tree *)
let tree1 = Empty;;
let tree2 = Leaf(3);;
let tree3 = Node (tree1, 4, tree2);;
let tree4 = Node (tree2, 5, tree3);;

(* receive ree_t and return the depth *)
(* tree_depth : tree_t -> int *)
let rec tree_depth tree = match tree with
    Empty -> 0
  | Leaf (n) -> 1
  | Node (t1, n, t2) -> 1 + max(tree_depth t1) (tree_depth t2);;

(* test *)
let test1 = tree_depth tree1 = 0;;
let test2 = tree_depth tree2 = 1;;
let test3 = tree_depth tree3 = 2;;
let test4 = tree_depth tree4 = 3;;
type tree_t = Empty | Leaf of int | Node of tree_t * int * tree_t
# val tree1 : tree_t = Empty
# val tree2 : tree_t = Leaf 3
# val tree3 : tree_t = Node (Empty, 4, Leaf 3)
# val tree4 : tree_t = Node (Leaf 3, 5, Node (Empty, 4, Leaf 3))
# val tree_depth : tree_t -> int = <fun>
# val test1 : bool = true
# val test2 : bool = true
# val test3 : bool = true
# val test4 : bool = true
# val test4 : bool = tru  C-c C-cInterrupted.
# 